// TODO: Insert description here. (generated by drosen)

#ifndef _BPF_COMMON_H_
#define _BPF_COMMON_H_

/* Return Codes for Fuse BPF programs */
#define BPF_FUSE_CONTINUE		0
#define BPF_FUSE_USER			1
#define BPF_FUSE_USER_PREFILTER		2
#define BPF_FUSE_POSTFILTER		3
#define BPF_FUSE_USER_POSTFILTER	4

enum fuse_bpf_type {
	FUSE_ENTRY_BACKING		= 1,
	FUSE_ENTRY_BPF			= 2,
	FUSE_ENTRY_REMOVE_BACKING	= 3,
	FUSE_ENTRY_REMOVE_BPF		= 4,
};

#define BPF_FUSE_NAME_MAX 15
struct fuse_bpf_entry_out {
	uint32_t	entry_type;
	uint32_t	unused;
	union {
		struct {
			uint64_t unused2;
			uint64_t fd;
		};
		char name[BPF_FUSE_NAME_MAX + 1];
	};
};

/* Op Code Filter values for BPF Programs */
#define FUSE_OPCODE_FILTER	0x0ffff
#define FUSE_PREFILTER		0x10000
#define FUSE_POSTFILTER		0x20000

#define BPF_FUSE_NAME_MAX 15

#define BPF_STRUCT_OPS(type, name, args...)					\
SEC("struct_ops/"#name)								\
type BPF_PROG(name, ##args)

/* available kfuncs for fuse_bpf */
extern uint32_t bpf_fuse_return_len(struct fuse_buffer *ptr) __ksym;
extern void bpf_fuse_get_rw_dynptr(struct fuse_buffer *buffer, struct bpf_dynptr *dynptr, u64 size, bool copy) __ksym;
extern void bpf_fuse_get_ro_dynptr(const struct fuse_buffer *buffer, struct bpf_dynptr *dynptr) __ksym;
extern void *bpf_dynptr_slice(const struct bpf_dynptr *ptr, u32 offset, void *buffer, u32 buffer__szk) __ksym;
extern void *bpf_dynptr_slice_rdwr(const struct bpf_dynptr *ptr, u32 offset, void *buffer, u32 buffer__szk) __ksym;

#endif /* _BPF_COMMON_H_ */
